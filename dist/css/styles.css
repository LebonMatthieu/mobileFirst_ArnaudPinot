@charset "UTF-8";
/*!
Theme Name: mobileFirst_PinotArnaud
Theme URI: http://arnaudpinot.fr
Author: Arnaud Pinot
Author URI: 
Version: 1.0
Text Domain: ap
*/
/* # Import des partiels */
/****************/
/* # Préfixes des classes générées */
/****************/
/*
Ces classes sont ajoutées devant les sélecteurs.

 - `xx` correspond à votre projet (et doit être configuré).
 
*/
/*
(Il est possible de sortir de cette encapsulation avec `@at-root{}`.)
*/
/*

Prefix : ap 

 */
/****************/
/* # Grille */
/****************/
/*
 - `gutter` : largeur des gouttières ;
*/
/****************/
/* # Media Queries with _Sass-mq_ */
/****************/
/* https://github.com/sass-mq/sass-mq */
/****************/
/* # Variables */
/****************/
/* # Imports des librairies tierces */
/*! normalize.css v3.0.3 | MIT License | github.com/necolas/normalize.css */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS and IE text size adjust after device orientation change,
 *    without disabling user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Remove default margin.
 */
body {
  margin: 0;
}

/* HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined for any HTML5 element in IE 8/9.
 * Correct `block` display not defined for `details` or `summary` in IE 10/11
 * and Firefox.
 * Correct `block` display not defined for `main` in IE 11.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
menu,
nav,
section,
summary {
  display: block;
}

/**
 * 1. Correct `inline-block` display not defined in IE 8/9.
 * 2. Normalize vertical alignment of `progress` in Chrome, Firefox, and Opera.
 */
audio,
canvas,
progress,
video {
  display: inline-block;
  /* 1 */
  vertical-align: baseline;
  /* 2 */
}

/*
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/*
 * Address `[hidden]` styling not present in IE 8/9/10.
 * Hide the `template` element in IE 8/9/10/11, Safari, and Firefox < 22.
 */
[hidden],
template {
  display: none;
}

/* Links
   ========================================================================== */
/**
 * Remove the gray background color from active links in IE 10.
 */
a {
  background-color: transparent;
}

/**
 * Improve readability of focused elements when they are also in an
 * active/hover state.
 */
a:active,
a:hover {
  outline: 0;
}

/* Text-level semantics
   ========================================================================== */
/**
 * Address styling not present in IE 8/9/10/11, Safari, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 4+, Safari, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

/**
 * Address styling not present in Safari and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9/10.
 */
img {
  border: 0;
}

/**
 * Correct overflow not hidden in IE 8/9/10/11.
 */
svg:not(:root) {
  overflow: hidden;
}

/* Grouping content
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari.
 */
figure {
  margin: 1em 40px;
}

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Contain overflow in all browsers.
 */
pre {
  overflow: auto;
}

/**
 * Address odd `em`-unit font size rendering in all browsers.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

/* Forms
   ========================================================================== */
/**
 * Known limitation: by default, Chrome and Safari on OS X allow very limited
 * styling of `select`, unless a `border` property is set.
 */
/**
 * 1. Correct color not being inherited.
 *    Known issue: affects color of disabled elements.
 * 2. Correct font properties not being inherited.
 * 3. Address margins set differently in Firefox 4+, Safari, and Chrome.
 */
button,
input,
optgroup,
select,
textarea {
  color: inherit;
  /* 1 */
  font: inherit;
  /* 2 */
  margin: 0;
  /* 3 */
}

/**
 * Address `overflow` set to `hidden` in IE 8/9/10/11.
 */
button {
  overflow: visible;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Firefox, IE 8/9/10/11, and Opera.
 * Correct `select` style inheritance in Firefox.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
input {
  line-height: normal;
}

/**
 * It's recommended that you don't attempt to style these elements.
 * Firefox's implementation doesn't respect box-sizing, padding, or width.
 *
 * 1. Address box sizing set to `content-box` in IE 8/9/10.
 * 2. Remove excess padding in IE 8/9/10.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Fix the cursor style for Chrome's increment/decrement buttons. For certain
 * `font-size` values of the `input`, it causes the cursor style of the
 * decrement button to change from `default` to `text`.
 */
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari and Chrome.
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  box-sizing: content-box;
  /* 2 */
}

/**
 * Remove inner padding and search cancel button in Safari and Chrome on OS X.
 * Safari (but not Chrome) clips the cancel button when the search input has
 * padding (and `textfield` appearance).
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct `color` not being inherited in IE 8/9/10/11.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */
}

/**
 * Remove default vertical scrollbar in IE 8/9/10/11.
 */
textarea {
  overflow: auto;
}

/**
 * Don't inherit the `font-weight` (applied by a rule above).
 * NOTE: the default cannot safely be changed in Chrome and Safari on OS X.
 */
optgroup {
  font-weight: bold;
}

/* Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

th,
td {
  padding: 0;
}

body:before {
  background-color: #FCF8E3;
  border-bottom: 1px solid #FBEED5;
  border-left: 1px solid #FBEED5;
  color: #C09853;
  font: small-caption;
  padding: 3px 6px;
  position: fixed;
  right: 0;
  top: 0;
  z-index: 100;
}

@media all and (min-width: 20em) {
  body:before {
    content: "mobile ≥ 320px (20em)";
  }
}

@media all and (min-width: 45em) {
  body:before {
    content: "tablet ≥ 720px (45em)";
  }
}

@media all and (min-width: 64em) {
  body:before {
    content: "desktop ≥ 1024px (64em)";
  }
}

@media all and (min-width: 87.5em) {
  body:before {
    content: "wide ≥ 1400px (87.5em)";
  }
}

/* # Imports des utilitaires */
/* # Rétablissement du flux */
/*
http://nicolasgallagher.com/micro-clearfix-hack/
*/
/* # _Reset_ (et sa version surchargée) */
/* # Contenu masqué visuellement (et sa version surchargée) */
/**** Keyframes Animation ****/
/*
https://developer.yahoo.com/blogs/ydn/clip-hidden-content-better-accessibility-53456.html
*/
/* # Survol des liens */
/* Pas de soulignement par défaut, puis soulignement au survol ou au focus. */
/* Ou soulignement par défaut, puis pas de soulignement au survol ou au focus. */
/* # Étirement des blocs */
/* # Utilitaire pour la fonction calc() */
/* # Imports des styles de base */
/* Déclaration des éléments de bases pour les éléments HTML5, les classes utiles, les titres et les styles de textes*/
/*****************/
/******HTML5 Elements*****/
/*****************/
* {
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
  position: relative;
  color: #000;
  background-color: #fff;
  height: 100%;
  -webkit-font-smoothing: antialiased;
}

body {
  height: 100%;
}

*, *::before, *::after {
  background-repeat: no-repeat;
}

h1, h2, h3, h4 {
  margin: 0;
}

p {
  margin: 0;
}

svg, img {
  width: 100%;
  max-width: 100%;
}

ul {
  margin: 0;
  padding: 0;
}

li {
  list-style: none;
}

a {
  text-decoration: none;
  color: inherit;
}

blockquote {
  padding: 0;
  margin: 0;
}

.overflow {
  overflow: hidden;
}

.uppercase {
  text-transform: uppercase;
}

.hide-for-viewer {
  position: absolute;
  height: 1px;
  width: 1px;
  padding: 0;
  border: 0;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
}

/* # Imports des _plugins_ */
/* # JS Clickbox */
.no-touchevents .js-clickbox.is-hover {
  cursor: pointer;
}

/* # Imports des utilitaires (préfixés) */
/*
Il est possible de sortir de cette encapsulation avec `@at-root{}`.
*/
/* # Imports des styles de base */
.ap {
  /* Déclaration des éléments de bases pour les éléments HTML5, les classes utiles, les titres et les styles de textes*/
  /*****************/
  /******HTML5 Elements*****/
  /*****************/
}

* {
  box-sizing: border-box;
}

html {
  font-size: 62.5%;
  position: relative;
  color: #000;
  background-color: #fff;
  height: 100%;
  -webkit-font-smoothing: antialiased;
}

body {
  height: 100%;
}

*, *::before, *::after {
  background-repeat: no-repeat;
}

h1, h2, h3, h4 {
  margin: 0;
}

p {
  margin: 0;
}

svg, img {
  width: 100%;
  max-width: 100%;
}

ul {
  margin: 0;
  padding: 0;
}

li {
  list-style: none;
}

a {
  text-decoration: none;
  color: inherit;
}

blockquote {
  padding: 0;
  margin: 0;
}

.overflow {
  overflow: hidden;
}

.uppercase {
  text-transform: uppercase;
}

.hide-for-viewer {
  position: absolute;
  height: 1px;
  width: 1px;
  padding: 0;
  border: 0;
  overflow: hidden;
  clip: rect(1px 1px 1px 1px);
  clip: rect(1px, 1px, 1px, 1px);
}

/* # Imports des styles pour l’agencement général (préfixés) */
.ap {
  /* # Layout */
}

.ap-centered {
  margin: auto;
  padding: 0 2rem;
  max-width: 136rem;
}

@media all and (min-width: 64em) {
  .ap-centered {
    padding: 0 4rem;
  }
}

/* # Imports des composants (préfixés) */
.ap {
  /* # Boutons */
  /* # Links */
  /* # Lists */
  /*****************/
  /****** Titles *****/
  /*****************/
  /*****************/
  /****** Text *****/
  /*****************/
}

.ap-link {
  display: inline-block;
  position: relative;
  color: #000;
}

.ap-link:after {
  content: '';
  position: absolute;
  left: 0;
  bottom: 0;
  width: 100%;
  height: 0.2rem;
  background-color: #000;
}

.ap-link:hover {
  color: #3142FF;
}

.ap-link:hover:after {
  background-color: #3142FF;
}

.title-alpha {
  font-family: "Work Sans", sans-serif;
  font-style: normal;
  font-size: 22px;
  font-size: 2.2rem;
  font-weight: 700;
  line-height: 1.45455;
}

.title-beta {
  font-family: "Work Sans", sans-serif;
  font-style: normal;
  font-size: 60px;
  font-size: 6rem;
  font-weight: 800;
  line-height: 1.16667;
}

.title-gamma {
  font-family: "Work Sans", sans-serif;
  font-style: normal;
  font-size: 100px;
  font-size: 10rem;
  font-weight: 700;
  line-height: 1;
}

.text-alpha {
  font-family: "Work Sans", sans-serif;
  font-style: normal;
  font-size: 16px;
  font-size: 1.6rem;
  font-weight: 500;
  line-height: 1;
}

.text-beta {
  font-family: "Work Sans", sans-serif;
  font-style: normal;
  font-size: 18px;
  font-size: 1.8rem;
  font-weight: 700;
  line-height: 1;
}

.text-gamma {
  font-family: "Work Sans", sans-serif;
  font-style: normal;
  font-size: 20px;
  font-size: 2rem;
  font-weight: 500;
  line-height: 1.4;
}

/* # Imports des pages (préfixés) */
/* # Imports de l’espace temporaire de travail */
/* # Espace temporaire de travail (honteux) */
/* http://csswizardry.com/2013/04/shame-css/ */

/*# sourceMappingURL=data:application/json;base64, */
